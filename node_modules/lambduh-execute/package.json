{
  "name": "lambduh-execute",
  "version": "1.3.0",
  "description": "Execute any shell string or bash script from AWS Lambda",
  "main": "index.js",
  "scripts": {
    "test": "mocha test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/lambduh/lambduh-execute.git"
  },
  "keywords": [
    "lambda",
    "aws",
    "exec",
    "execute",
    "shell"
  ],
  "author": {
    "name": "Russell Matney",
    "email": "russell.matney@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/lambduh/lambduh-execute/issues"
  },
  "homepage": "https://github.com/lambduh/lambduh-execute",
  "devDependencies": {
    "chai": "^2.1.1",
    "chai-fs": "git://github.com/carrot/chai-fs.git#version-bump",
    "gulp": "^3.8.11",
    "gulp-mocha": "^2.0.0",
    "mocha": "^2.2.1"
  },
  "dependencies": {
    "q": "^1.2.0"
  },
  "readme": "# lambduh-execute\nExecute any shell string or bash script from AWS Lambda\n\n# Install\n\n```\nnpm i --save lambduh-execute\n```\n\n# Usage\n\n```javascript\nvar Q = require('q');\nvar execute = require('lambduh-execute');\n\n//your lambda function\nexports.handler = function(event, context) {\n\n  var result = {}\n  execute(result, {\n    shell: \"echo `ls /tmp/`\", // logs output of /tmp/ dir on your lambda machine\n    logOutput: true\n  })\n  .then(function(result) {\n    return execute(result, {\n      shell: \"cp /var/task/ffmpeg /tmp/.; chmod 755 /tmp/ffmpeg\", // copies an ffmpeg binary to /tmp/ and chmods permissions to run it\n      logOutput: true\n    })\n  })\n  .then(function(result) {\n    return execute(result, {\n      shell: \"rm \" + result.mp4Path // pulls in path from options object to fire dynamic script\n    });\n  })\n  .then(function(result) {\n    return execute(result, {\n      bashScript: \"/tmp/path/to/bash/script\" //you can also run a bash script\n    });\n  })\n  .then(function(result) {\n    return execute(result, {\n      bashScript: \"/tmp/path/to/bash/script\",\n      bashParams: [\"filey-namey\"] //and hand in any parameters you'd like\n    });\n  })\n  .then(function(result) {\n    context.done()\n  })\n  .fail(function(err) {\n    console.log(\"derp\");\n    console.log(err);\n    context.done(null, err);\n  });\n}\n```\n\nThis module takes a `script` object that can have a few options:\n\n - a `shell` field for writing a string of unix commands to be executed\n - a `baseScript` field with a path to the bash script to be executed\n - a `baseParams` array with params to be passed to the script\n - a `logOutput` boolean for showing the stdout and stderr logs\n\n`logOutput` defaults to false.\n\nThe tests in this repo could use enforcement around `logOutput` - I'm onto bigger fish for now, will hopefully get back to it.\n",
  "readmeFilename": "README.md",
  "_id": "lambduh-execute@1.3.0",
  "_shasum": "207e744d77c53a4e34fb0e4dbd2965ca76a9bb70",
  "_from": "lambduh-execute@",
  "_resolved": "https://registry.npmjs.org/lambduh-execute/-/lambduh-execute-1.3.0.tgz"
}
